library(ggplot2)
library(plotly)
### Import data
x_expr_location="/Users/karinemoussa/Documents/FALL PSU 2020/Thesis Research/Shiny_Apps/xci-app-1/data_sources/x_expr.tsv"
x_expr=read.delim(x_expr_location,header=T,sep="\t",na.strings="?")
xci_status_location="/Users/karinemoussa/Documents/FALL PSU 2020/Thesis Research/Shiny_Apps/xci-app-1/data_sources/Suppl.Table.1.csv"
xci_status=read.csv(xci_status_location,header=T,na.strings="?")
attach(x_expr)
##### X_expr Data Formatting #####
# Create categorical columns
XCI=as.factor(XCI)
GENE=as.factor(GENE)
#### XCI_status Data Formatting #####
# Drop NA columns
xci_status <- xci_status[-c(15:26)]
#### Create class of gene attributes ######
create_single_gene_stats <- function(gene)
### User passes in a gene name from the x_expr list
### Function returns the object "<gene>_stats" with attributes of gene
### Usage: assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
{assign(paste0(gene, "_gene_stats"),
# Add any attributes of interest to this list
(list(
# Gene name
name = gene,
# Vector of escape calls:
escape = c(XCI=x_expr[x_expr$GENE==gene,"XCI"]),
# Sample where the gene came from:
parent_sample = c(XCI=x_expr[x_expr$GENE==gene,"sample"]),
# Escape state (based on Vector of escape calls):
state = ifelse(all(c(XCI=x_expr[x_expr$GENE==gene,"XCI"]) == "S"), "SUPPRESS",
ifelse(all(c(XCI=x_expr[x_expr$GENE==gene,"XCI"]) == "E"),"ESCAPE",
"VARIABLE"))
)
)
)
}
gene_list = c("ZBED1", "XIST") # for testing
create_multiple_gene_stats <- function(gene_list){
### User passes a list of genes
### Function returns a list of "<gene>_stats" for each passed argument
### Usage
for(gene in gene_list) {
assign((paste0(gene, "_stats")), create_single_gene_stats(gene),
env = globalenv())
}
}
# Create a table summarizing genes and escape states
create_table_with_multiple_gene_stats <- function(gene_list){
### User passes a list of genes
### Function returns a table with gene statistics based on
###   the attributes in the "<gene>_stats" object
df <- data.frame(matrix(vector(), 0, 2,
dimnames=list(c(),c("GENE", "ESCAPE STATE"))),
stringsAsFactors=F)
for (gene in gene_list){
# Create gene stat df
gene_stat <- create_single_gene_stats(gene)
# Collect parameters of interest and add to gene_stat_table
gene_stat_vector <- c(gene_stat$name, gene_stat$state)
df <- rbind(df, gene_stat_vector)
}
return(df)
}
######### PLOTS ###################################
# create color palette to emphasize tau level
# (arbitrarily chose 0.3)
tau_sig_factor = 0.3
rm(tau_sig_factor)
x_expr[,"GENE"]
length(x_expr[,"GENE"])
length(unique(x_expr[,"GENE"]))
unique(x_expr[,"GENE"])
unique(c(x_expr[,"GENE"])
)
gene_list_all = c(unique(x_expr[,"GENE"]))
head(gene_list_all)
gene_stat_table <- create_table_with_multiple_gene_stats(gene_list_all)
View(gene_stat_table)
hist(gene_stat_table$X.VARIABLE.)
plot(gene_stat_table$X.VARIABLE.)
hist(table(gene_stat_table), freq=TRUE)
barplot(table(gene_stat_table))
ggplot(data.frame(gene_stat_table), aes(x=gene_stat_table)) + geom_bar()
ggplot(data.frame(gene_stat_table)) + geom_bar()
ggplot(data.frame(gene_stat_table),aes(x=gene_stat_table)
geom_histogram(fill="lightgreen")
barplot(summary(gene_stat_table$X.VARIABLE.))
# Create a table summarizing genes and escape states
create_table_with_multiple_gene_stats <- function(gene_list){
### User passes a list of genes
### Function returns a table with gene statistics based on
###   the attributes in the "<gene>_stats" object
df <- data.frame(matrix(vector(), 0, 2,
dimnames=list(c(),c("GENE", "ESCAPE STATE"))),
stringsAsFactors=F)
for (gene in gene_list){
# Create gene stat df
gene_stat <- create_single_gene_stats(gene)
# Collect parameters of interest and add to gene_stat_table
gene_stat_vector <- c(gene_stat$name, gene_stat$state)
df <- rbind(df, gene_stat_vector)
}
names(df)[1] <- "GENE"
names(df)[2] <- "ESCAPE.STATE"
return(df)
}
gene_stat_table <- create_multiple_gene_stats(gene_list_all)
gene_stat_table <- create_table_with_multiple_gene_stats(gene_list_all)
View(GPKOW_stats)
View(GLA_stats)
View(GPX1P1_stats)
View(HCFC1_stats)
View(HDAC8_stats)
View(HSPA8P1_stats)
View(NDUFA1_stats)
View(NUS1P1_stats)
View(APEX2_stats)
# Create a table summarizing genes and escape states
create_table_with_multiple_gene_stats <- function(gene_list){
### User passes a list of genes
### Function returns a table with gene statistics based on
###   the attributes in the "<gene>_stats" object
df <- data.frame(matrix(vector(), 0, 2))
for (gene in gene_list){
# Create gene stat df
gene_stat <- create_single_gene_stats(gene)
# Collect parameters of interest and add to gene_stat_table
gene_stat_vector <- c(gene_stat$name, gene_stat$state)
df <- rbind(df, gene_stat_vector)
}
names(df)[1] <- "GENE"
names(df)[2] <- "ESCAPE.STATE"
return(df)
}
gene_stat_table <- create_table_with_multiple_gene_stats(gene_list_all)
View(gene_stat_table)
barplot(summary(gene_stat_table$ESCAPE.STATE))
ggplot(data.frame(gene_stat_table))
ggplot(data.frame(gene_stat_table)) + geom_point()
ggplot(data.frame(gene_stat_table)) + geom_bar()
ggplot(table(gene_stat_table)) + geom_bar()
ggplot(data.frame(gene_stat_table), aes(x=gene_stat_table)) +
geom_bar()
barplot(prop.table(table(gene_stat_table)))
barplot(table(gene_stat_table))
shiny::runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
source("functions/create_gene_objects.R")
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
shiny::runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
### Set Working Directory ###
# For now, just setting it to where this script is saved
current_path = rstudioapi::getActiveDocumentContext()$path
current_oath
current_path
5e10
5e-10
5e-10ddsf
5e-10
(5e-10) * 10
(5e-10) * e10
(5e-10) * 1e10
c(unique(x_expr[,"sample"]))
length(c(unique(x_expr[,"sample"])))
c(expr[x_expr$GENE=="XIST", x_expr$status=="E"])
c(expr[x_expr$GENE=="XIST", "status"])
c(x_expr[x_expr$GENE=="XIST","status"])
c(x_expr[x_expr$GENE=="XIST","status"]) == "S"
length(c(x_expr[x_expr$GENE=="XIST","status"]) == "S")
length(c(x_expr[x_expr$GENE=="XIST","status"]) == "E")
(c(x_expr[x_expr$GENE=="XIST","status"]) == "E"
)
c(x_expr[x_expr$GENE=="XIST","status"])
table(c(x_expr[x_expr$GENE=="XIST","status"])
)
table(c(x_expr[x_expr$GENE=="XIST","status"]))
t <- table(c(x_expr[x_expr$GENE=="XIST","status"]))
t[names(t)=="E"]
t[names(t)=="S"]
table(c(x_expr[x_expr$GENE=="XIST","status"]))
table(c(x_expr[x_expr$GENE=="XIST","status"]))[1]
table(c(x_expr[x_expr$GENE=="XIST","status"]))[1,1]
table(c(x_expr[x_expr$GENE=="XIST","status"]))[1,2]
table(c(x_expr[x_expr$GENE=="XIST","status"]))[1]
View(t)
c(x_expr[x_expr$GENE=="XIST","status"]) == "S"
sum(c(x_expr[x_expr$GENE=="XIST","status"]) == "S")
sum(c(x_expr[x_expr$GENE=="XIST","status"]) == "E")
#### Create gene class: attributes for each gene ######
create_single_gene_stats <- function(gene)
### User passes in a gene name from the x_expr list
### Function returns the object "<gene>_stats" with attributes of gene
### Usage: assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
{assign(paste0(gene, "_stats"),
# Add any attributes of interest to this list
(list(
# Gene name (single)
gene_name = gene,
# Gene ID (single)
gene_id = c(id=x_expr[x_expr$GENE==gene,"gene_id"])[1],
# Escape status (vector)
status = c(stat=x_expr[x_expr$GENE==gene,"status"]),
# P_value (vector)
p_value = c(p=x_expr[x_expr$GENE==gene,"p_value"]),
# Average p_value (single)
avg_p_value = mean(c(x_expr[x_expr$GENE==gene,"p_value"])),
# Sample where the gene came from (vector)
parent_sample = c(ps=x_expr[x_expr$GENE==gene,"sample"]),
# Escape state (based on Vector of escape calls) (single)
escape_category = ifelse(all(c(esc_cat=x_expr[x_expr$GENE==gene,"status"]) == "S"), "SUPPRESS",
ifelse(all(c(esc_cat=x_expr[x_expr$GENE==gene,"status"]) == "E"),"ESCAPE",
"VARIABLE")),
# Percentage of samples for which gene escaped (single)
num_esc = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "E"),
num_sup = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "S"),
perc_samples_esc = num_esc/(num_esc + num_sup),
rm(num_esc),
rm(num_sup),
# Tau (vector)
tau = c(tau=x_expr[x_expr$GENE==gene,"tau"]),
# Cell Type (vector)
cell_type = c(ctype=rep("lymphoblast",length(x_expr[x_expr$GENE==gene,"status"])))
)
)
)
}
assign((paste0("XIST", "_stats"))
)
assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
gene = "XIST"
assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
#### Create gene class: attributes for each gene ######
create_single_gene_stats <- function(gene)
### User passes in a gene name from the x_expr list
### Function returns the object "<gene>_stats" with attributes of gene
### Usage: assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
{assign(paste0(gene, "_stats"),
# Add any attributes of interest to this list
(list(
# Gene name (single)
gene_name = gene,
# Gene ID (single)
gene_id = c(id=x_expr[x_expr$GENE==gene,"gene_id"])[1],
# Escape status (vector)
status = c(stat=x_expr[x_expr$GENE==gene,"status"]),
# P_value (vector)
p_value = c(p=x_expr[x_expr$GENE==gene,"p_value"]),
# Average p_value (single)
avg_p_value = mean(c(x_expr[x_expr$GENE==gene,"p_value"])),
# Sample where the gene came from (vector)
parent_sample = c(ps=x_expr[x_expr$GENE==gene,"sample"]),
# Escape state (based on Vector of escape calls) (single)
escape_category = ifelse(all(c(esc_cat=x_expr[x_expr$GENE==gene,"status"]) == "S"), "SUPPRESS",
ifelse(all(c(esc_cat=x_expr[x_expr$GENE==gene,"status"]) == "E"),"ESCAPE",
"VARIABLE")),
# Percentage of samples for which gene escaped (single)
num_esc = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "E"),
num_sup = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "S"),
perc_samples_esc = num_esc/(num_esc + num_sup),
# Tau (vector)
tau = c(tau=x_expr[x_expr$GENE==gene,"tau"]),
# Cell Type (vector)
cell_type = c(ctype=rep("lymphoblast",length(x_expr[x_expr$GENE==gene,"status"])))
)
)
)
}
assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
#### Create gene class: attributes for each gene ######
create_single_gene_stats <- function(gene)
### User passes in a gene name from the x_expr list
### Function returns the object "<gene>_stats" with attributes of gene
### Usage: assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
{assign(paste0(gene, "_stats"),
# Add any attributes of interest to this list
(list(
# Gene name (single)
gene_name = gene,
# Gene ID (single)
gene_id = c(id=x_expr[x_expr$GENE==gene,"gene_id"])[1],
# Escape status (vector)
status = c(stat=x_expr[x_expr$GENE==gene,"status"]),
# P_value (vector)
p_value = c(p=x_expr[x_expr$GENE==gene,"p_value"]),
# Average p_value (single)
avg_p_value = mean(c(x_expr[x_expr$GENE==gene,"p_value"])),
# Sample where the gene came from (vector)
parent_sample = c(ps=x_expr[x_expr$GENE==gene,"sample"]),
# Escape state (based on Vector of escape calls) (single)
escape_category = ifelse(all(c(esc_cat=x_expr[x_expr$GENE==gene,"status"]) == "S"), "SUPPRESS",
ifelse(all(c(esc_cat=x_expr[x_expr$GENE==gene,"status"]) == "E"),"ESCAPE",
"VARIABLE")),
# Percentage of samples for which gene escaped (single)
#num_esc = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "E"),
#num_sup = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "S"),
perc_samples_esc = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "E")/(sum(c(x_expr[x_expr$GENE==gene,"status"]) == "E") +
sum(c(x_expr[x_expr$GENE==gene,"status"]) == "E")),
# Tau (vector)
tau = c(tau=x_expr[x_expr$GENE==gene,"tau"]),
# Cell Type (vector)
cell_type = c(ctype=rep("lymphoblast",length(x_expr[x_expr$GENE==gene,"status"])))
)
)
)
}
assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
View(XIST_stats)
View(XIST_stats)
#### Create gene class: attributes for each gene ######
create_single_gene_stats <- function(gene)
### User passes in a gene name from the x_expr list
### Function returns the object "<gene>_stats" with attributes of gene
### Usage: assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
{assign(paste0(gene, "_stats"),
# Add any attributes of interest to this list
(list(
# Gene name (single)
gene_name = gene,
# Gene ID (single)
gene_id = c(id=x_expr[x_expr$GENE==gene,"gene_id"])[1],
# Escape status (vector)
status = c(stat=x_expr[x_expr$GENE==gene,"status"]),
# P_value (vector)
p_value = c(p=x_expr[x_expr$GENE==gene,"p_value"]),
# Average p_value (single)
avg_p_value = mean(c(x_expr[x_expr$GENE==gene,"p_value"])),
# Sample where the gene came from (vector)
parent_sample = c(ps=x_expr[x_expr$GENE==gene,"sample"]),
# Escape state (based on Vector of escape calls) (single)
escape_category = ifelse(all(c(esc_cat=x_expr[x_expr$GENE==gene,"status"]) == "S"), "SUPPRESS",
ifelse(all(c(esc_cat=x_expr[x_expr$GENE==gene,"status"]) == "E"),"ESCAPE",
"VARIABLE")),
# Percentage of samples for which gene escaped (single)
#num_esc = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "E"),
#num_sup = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "S"),
perc_samples_esc = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "E")/sum(c(x_expr[x_expr$GENE==gene,"status"])),
# Tau (vector)
tau = c(tau=x_expr[x_expr$GENE==gene,"tau"]),
# Cell Type (vector)
cell_type = c(ctype=rep("lymphoblast",length(x_expr[x_expr$GENE==gene,"status"])))
)
)
)
}
assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
#### Create gene class: attributes for each gene ######
create_single_gene_stats <- function(gene)
### User passes in a gene name from the x_expr list
### Function returns the object "<gene>_stats" with attributes of gene
### Usage: assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
{assign(paste0(gene, "_stats"),
# Add any attributes of interest to this list
(list(
# Gene name (single)
gene_name = gene,
# Gene ID (single)
gene_id = c(id=x_expr[x_expr$GENE==gene,"gene_id"])[1],
# Escape status (vector)
status = c(stat=x_expr[x_expr$GENE==gene,"status"]),
# P_value (vector)
p_value = c(p=x_expr[x_expr$GENE==gene,"p_value"]),
# Average p_value (single)
avg_p_value = mean(c(x_expr[x_expr$GENE==gene,"p_value"])),
# Sample where the gene came from (vector)
parent_sample = c(ps=x_expr[x_expr$GENE==gene,"sample"]),
# Escape state (based on Vector of escape calls) (single)
escape_category = ifelse(all(c(esc_cat=x_expr[x_expr$GENE==gene,"status"]) == "S"), "SUPPRESS",
ifelse(all(c(esc_cat=x_expr[x_expr$GENE==gene,"status"]) == "E"),"ESCAPE",
"VARIABLE")),
# Percentage of samples for which gene escaped (single)
#num_esc = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "E"),
#num_sup = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "S"),
perc_samples_esc = sum(c(x_expr[x_expr$GENE==gene,"status"]) == "E")/length(c(x_expr[x_expr$GENE==gene,"status"])),
# Tau (vector)
tau = c(tau=x_expr[x_expr$GENE==gene,"tau"]),
# Cell Type (vector)
cell_type = c(ctype=rep("lymphoblast",length(x_expr[x_expr$GENE==gene,"status"])))
)
)
)
}
assign((paste0(gene, "_stats")), create_single_gene_stats(gene))
View(XIST_stats)
c(x_expr[x_expr$GENE=="XIST","status"])
c(x_expr[x_expr$GENE=="XIST","status"]) == "E"
sum(c(x_expr[x_expr$GENE=="XIST","status"]) == "E")
length(c(x_expr[x_expr$GENE=="XIST","status"]) == "E")
6/56
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/ccle-proteomics-app')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/ccle-proteomics-app')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
shiny::runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
shiny::runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
shiny::runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
shiny::runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
runApp('Documents/Programming/R_learning/Shiny_Apps/xci-app-1')
shiny::runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
shiny::runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
shiny::runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
shiny::runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
### Source Libraries #####
library(ggplot2)
library(plotly)
library(rstudioapi)
library(tidyverse)
library(png)
library(shiny)
### Set Working Directory ###
# Setting working directory to where XCI app is stored (one branch up)
current_path = rstudioapi::getActiveDocumentContext()$path
working_directory = str_remove(current_path,"sandbox")
setwd(dirname(working_directory))
rm(current_path)
rm(working_directory)
runApp('~/Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('~/Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('~/Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('~/Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('~/Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('~/Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
runApp('~/Documents/FALL_PSU_2020/Thesis_Research/Shiny_Apps/xci-app-1')
